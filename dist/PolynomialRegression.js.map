{"version":3,"file":"PolynomialRegression.js","mappings":"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","sources":["webpack://js-polynomial-regression/webpack/universalModuleDefinition","webpack://js-polynomial-regression/webpack/bootstrap","webpack://js-polynomial-regression/webpack/runtime/define property getters","webpack://js-polynomial-regression/webpack/runtime/hasOwnProperty shorthand","webpack://js-polynomial-regression/webpack/runtime/make namespace object","webpack://js-polynomial-regression/./src/Matrix.js","webpack://js-polynomial-regression/./src/DataPoint.js","webpack://js-polynomial-regression/./src/PolynomialRegression.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\r\n\r\nexport default class Matrix {\r\n\r\n    /**\r\n     * performs backward substitution on a matrix\r\n     * @param anyMatrix - a matrix that has already undergone forward substitution\r\n     * @param arr - an array that will ultimately be the final output for A0 - Ak\r\n     * @param row - last row index\r\n     * @param col - column index\r\n     * @returns {*}\r\n     */\r\n    backwardSubstitution (anyMatrix, arr, row, col) {\r\n        if (row < 0 || col < 0) {\r\n            return arr;\r\n        } \r\n        else {\r\n            const rows  = anyMatrix.length;\r\n            const cols  = anyMatrix[0].length - 1;\r\n            let current = 0;\r\n            let counter = 0;\r\n\r\n            for (let i = cols - 1; i >= col; i--) {\r\n\r\n                if (i === col) {\r\n                    current = anyMatrix[row][cols] / anyMatrix[row][i];\r\n\r\n\r\n                } else {\r\n                    anyMatrix[row][cols] -= anyMatrix[row][i] * arr[rows - 1 - counter];\r\n                    counter++;\r\n                }\r\n            }\r\n\r\n            arr[row] = current;\r\n            return this.backwardSubstitution(anyMatrix, arr, row - 1, col - 1);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Combines a square matrix with a matrix with K rows and only 1 column for GJ Elimination\r\n     * @param left\r\n     * @param right\r\n     * @returns {*[]}\r\n     */\r\n    combineMatrices (left, right){\r\n\r\n        const rows         = right.length;\r\n        const cols         = left[0].length;\r\n        const returnMatrix = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            returnMatrix.push([]);\r\n\r\n            for (let j = 0; j <= cols; j++) {\r\n\r\n                if (j === cols) {\r\n\r\n                    returnMatrix[i][j] = right[i];\r\n\r\n                } else {\r\n\r\n                    returnMatrix[i][j] = left[i][j];\r\n                }\r\n            }\r\n        }\r\n\r\n        return returnMatrix;\r\n    }\r\n\r\n    /**\r\n     * Performs forward elimination for GJ elimination to form an upper right triangle matrix\r\n     * @param anyMatrix\r\n     * @returns {*[]}\r\n     */\r\n    forwardElimination(anyMatrix){\r\n\r\n        const rows    = anyMatrix.length;\r\n        const cols    = anyMatrix[0].length;\r\n        const matrix  = [];\r\n        //returnMatrix = anyMatrix;\r\n        for (let i = 0; i < rows; i++) {\r\n\r\n            matrix.push([]);\r\n\r\n            for (let j = 0; j < cols; j++) {\r\n                matrix[i][j] = anyMatrix[i][j];\r\n            }\r\n        }\r\n\r\n        for (let x = 0; x < rows - 1; x++) {\r\n\r\n            for (let z = x; z < rows - 1; z++) {\r\n\r\n                const numerator   = matrix[z + 1][x];\r\n                const denominator = matrix[x][x];\r\n                const result      = numerator / denominator;\r\n\r\n\r\n                for (let i = 0; i < cols; i++) {\r\n\r\n                    matrix[z + 1][i] = matrix[z + 1][i] - (result * matrix[x][i]);\r\n                }\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    /**\r\n     * THIS METHOD ACTS LIKE A CONTROLLER AND PERFORMS ALL THE NECESSARY STEPS OF GJ ELIMINATION TO PRODUCE\r\n     * THE TERMS NECESSARY FOR POLYNOMIAL REGRESSION USING THE LEAST SQUARES METHOD WHERE SUM(RESIDUALS) = 0\r\n     * @param leftMatrix\r\n     * @param rightMatrix\r\n     * @returns {*}\r\n     */\r\n    gaussianJordanElimination(leftMatrix, rightMatrix) {\r\n\r\n        const combined       = this.combineMatrices(leftMatrix, rightMatrix);\r\n        const fwdIntegration = this.forwardElimination(combined);\r\n        //NOW, FINAL STEP IS BACKWARD SUBSTITUTION WHICH RETURNS THE TERMS NECESSARY FOR POLYNOMIAL REGRESSION\r\n        return this.backwardSubstitution(fwdIntegration, [], fwdIntegration.length - 1, fwdIntegration[0].length - 2);\r\n    }\r\n\r\n    /**\r\n     * returns the identity matrix for a matrix such that anyMatrix * identitymatrix = anyMatrix\r\n     * This is useful for inverting a matrix\r\n     * @param anyMatrix\r\n     * @returns {*[]}\r\n     */\r\n    identityMatrix (anyMatrix){\r\n\r\n        const rows           = anyMatrix.length;\r\n        const cols           = anyMatrix[0].length;\r\n        const identityMatrix = [[]];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                if (j === i) {\r\n                    identityMatrix[i][j] = 1;\r\n                } else {\r\n                    identityMatrix[i][j] = 0;\r\n                }\r\n            }\r\n        }\r\n        return identityMatrix;\r\n    }\r\n\r\n\r\n    /**\r\n     * calculates the product of 2 matrices\r\n     * @param matrix1\r\n     * @param matrix2\r\n     * @returns {*}\r\n     */\r\n    matrixProduct (matrix1, matrix2) {\r\n        const numCols1 = matrix1[0].length;\r\n        const numRows2 = matrix2.length;\r\n\r\n        if (numCols1 !== numRows2) {\r\n            return false;\r\n        }\r\n\r\n        const product = [[]];\r\n\r\n        for (let rows = 0; rows < numRows2; rows++) {\r\n            for (let cols = 0; cols < numCols1; cols++) {\r\n                product[rows][cols] = this.doMultiplication(matrix1, matrix2, rows,\r\n                    cols, numCols1);\r\n            }\r\n        }\r\n        return product;\r\n    }\r\n\r\n    /**\r\n     * performs multiplication for an individual matrix cell\r\n     * @param matrix1\r\n     * @param matrix2\r\n     * @param row\r\n     * @param col\r\n     * @param numCol\r\n     * @returns {number}\r\n     */\r\n    doMultiplication (matrix1, matrix2, row, col, numCol) {\r\n        let counter = 0;\r\n        let result  = 0;\r\n        while (counter < numCol) {\r\n            result += matrix1[row][counter] * matrix2[counter][col];\r\n            counter++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    /**\r\n     * Multiplies a row of a matrix - 1 of the fundamental matrix operations\r\n     * @param anyMatrix\r\n     * @param rowNum\r\n     * @param multiplier\r\n     * @returns {*[]}\r\n     */\r\n    multiplyRow (anyMatrix, rowNum, multiplier){\r\n        const rows    = anyMatrix.length;\r\n        const cols    = anyMatrix[0].length;\r\n        const mMatrix = [[]];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                if (i === rowNum) {\r\n                    mMatrix[i][j] = anyMatrix[i][j] * multiplier;\r\n                } else {\r\n                    mMatrix[i][j] = anyMatrix[i][j];\r\n                }\r\n            }\r\n        }\r\n\r\n        return mMatrix;\r\n    }\r\n}","/**\r\n * Simple data point object for use as a consistent data storage mechanism\r\n * @param x\r\n * @param y\r\n * @constructor\r\n */\r\nexport default class DataPoint {\r\n    constructor(x,y){\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","import Matrix from './Matrix.js';\r\nimport DataPoint from './DataPoint.js';\r\n\r\n/**\r\n * The constructor for a PolynomialRegression object an example of it's usage is below\r\n *\r\n *\r\n * var someData = [];\r\n * someData.push(new DataPoint(0.0, 1.0));\r\n * someData.push(new DataPoint(1.0, 3.0));\r\n * someData.push(new DataPoint(2.0, 6.0));\r\n * someData.push(new DataPoint(3.0, 9.0));\r\n * someData.push(new DataPoint(4.0, 12.0));\r\n * someData.push(new DataPoint(5.0, 15.0));\r\n * someData.push(new DataPoint(6.0, 18.0));\r\n *\r\n * var poly = new PolynomialRegression(someData, 3);\r\n * var terms = poly.getTerms();\r\n *\r\n * for(var i = 0; i < terms.length; i++){\r\n *    console.log(\"term \" + i, terms[i]);\r\n * }\r\n * console.log(poly.predictY(terms, 5.0));\r\n *\r\n *\r\n *\r\n * @param theData\r\n * @param degrees\r\n * @constructor\r\n */\r\nexport default class PolynomialRegression {\r\n\r\n    /**\r\n     *\r\n     * @param {Array} list\r\n     * @param {Number} degrees\r\n     * @returns {PolynomialRegression}\r\n     */\r\n    static read(list, degrees){\r\n        const data_points = list.map(item => {\r\n            return new DataPoint(item.x, item.y);\r\n        });\r\n\r\n        return new PolynomialRegression(data_points, degrees);\r\n    }\r\n    \r\n    constructor(data_points, degrees) {\r\n        //private object variables\r\n        this.data        = data_points;\r\n        this.degree      = degrees;\r\n        this.matrix      = new Matrix();\r\n        this.leftMatrix  = [];\r\n        this.rightMatrix = [];\r\n    \r\n        this.generateLeftMatrix();\r\n        this.generateRightMatrix();\r\n    }\r\n    \r\n    /**\r\n     * Sums up all x coordinates raised to a power\r\n     * @param anyData\r\n     * @param power\r\n     * @returns {number}\r\n     */\r\n    sumX (anyData, power) {\r\n        let sum = 0;\r\n        for (let i = 0; i < anyData.length; i++) {\r\n            sum += Math.pow(anyData[i].x, power);\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * sums up all x * y where x is raised to a power\r\n     * @param anyData\r\n     * @param power\r\n     * @returns {number}\r\n     */\r\n    sumXTimesY(anyData, power){\r\n        let sum = 0;\r\n        for (let i = 0; i < anyData.length; i++) {\r\n            sum += Math.pow(anyData[i].x, power) * anyData[i].y;\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Sums up all Y's raised to a power\r\n     * @param anyData\r\n     * @param power\r\n     * @returns {number}\r\n     */\r\n    sumY (anyData, power){\r\n        let sum = 0;\r\n        for (let i = 0; i < anyData.length; i++) {\r\n            sum += Math.pow(anyData[i].y, power);\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    /**\r\n     * generate the left matrix\r\n     */\r\n    generateLeftMatrix(){\r\n        for (let i = 0; i <= this.degree; i++) {\r\n            this.leftMatrix.push([]);\r\n            for (let j = 0; j <= this.degree; j++) {\r\n                if (i === 0 && j === 0) {\r\n                    this.leftMatrix[i][j] = this.data.length;\r\n                } else {\r\n                    this.leftMatrix[i][j] = this.sumX(this.data, (i + j));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * generates the right hand matrix\r\n     */\r\n    generateRightMatrix(){\r\n        for (let i = 0; i <= this.degree; i++) {\r\n            if (i === 0) {\r\n                this.rightMatrix[i] = this.sumY(this.data, 1);\r\n            } else {\r\n                this.rightMatrix[i] = this.sumXTimesY(this.data, i);\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * gets the terms for a polynomial\r\n     * @returns {*}\r\n     */\r\n    getTerms(){\r\n        return this.matrix.gaussianJordanElimination(this.leftMatrix, this.rightMatrix);\r\n    }\r\n    \r\n    /**\r\n     * Predicts the Y value of a data set based on polynomial coefficients and the value of an independent variable\r\n     * @param terms\r\n     * @param x\r\n     * @returns {number}\r\n     */\r\n    predictY(terms, x){\r\n    \r\n        let result = 0;\r\n        for (let i = terms.length - 1; i >= 0; i--) {\r\n            if (i === 0) {\r\n                result += terms[i];\r\n            } else {\r\n                result += terms[i] * Math.pow(x, i);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}"],"names":["root","factory","exports","module","define","amd","a","i","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Matrix","_classCallCheck","anyMatrix","arr","row","col","rows","length","cols","current","counter","this","backwardSubstitution","left","right","returnMatrix","push","j","matrix","x","z","result","leftMatrix","rightMatrix","combined","combineMatrices","fwdIntegration","forwardElimination","identityMatrix","matrix1","matrix2","numCols1","numRows2","product","doMultiplication","numCol","rowNum","multiplier","mMatrix","DataPoint","_createClass","y","PolynomialRegression","data_points","degrees","data","degree","generateLeftMatrix","generateRightMatrix","list","map","item","anyData","power","sum","Math","pow","sumX","sumY","sumXTimesY","gaussianJordanElimination","terms"],"sourceRoot":""}